@startuml
interface Sorter{
  +load(elements:int[])
  +sort()
  +getPlan()
}

class QuickSorter implements Sorter{
  -a:int[] 
  -swap():void
}

class HeapSorter implements Sorter{
  -a:int[] 
  -swap():void
}

interface Linable{
  +setPosition(position:Position):void
  +getPosition():Position
  +getValue():int
}

abstract Commander{
  -sorter:Sorter
  -parsePlan(plan:String):String[]
  -{abstract}execute(step:string):void
  +setSorter(sorter:Sorter):void
  +lineUp(line:Line):String
}

class Snake extends Commander{
 -execute(step:string):void
}


class Monster implements Linable{
  -r,g,b, rank: int
  -position:Position
  Monster(r,g,b, rank:int)
  +getRank():int
  +swapPosition(another:Gourd):void
}

class Line{
-positions:Position[]
+Line(length:int)
  +toArray():Linable
+put(linable:Linable, i:int):void
+get(i:int):Linable
}

class Line.Position{
-linable:Linable
Position(linable:Linable)
+setLinable(linable:Linable):void
}


class ColorReader{
  -image : BufferedImage
  - rows, columns : int
  - xStart, yStart, xOffset, yOffset : int
  + ColorReader(String filepath, int rows, int columns)
  + GetColor(int r, int c) : int[]
}

Sorter "1" -o "1" Commander
Line "1" o-- "N" Line.Position
Line.Position "1" o-o "1" Monster

'Scene o-- ColorReader
@enduml